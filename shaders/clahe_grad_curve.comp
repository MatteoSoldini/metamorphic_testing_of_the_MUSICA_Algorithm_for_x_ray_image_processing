#version 450
//#extension GL_EXT_debug_printf : enable

#define CLAHE_HISTOGRAM_BINS 256
#define TILES_COUNT 4

layout (local_size_x = TILES_COUNT, local_size_y = TILES_COUNT) in;

struct Point {
    float x;
    float y;
};

layout (binding = 0) buffer GradationCurveObject {
    Point points[TILES_COUNT][TILES_COUNT][CLAHE_HISTOGRAM_BINS];
};
layout (binding = 1, r32ui) uniform uimage3D histograms; // tile x, tile y, bins

Point normalizedHist[CLAHE_HISTOGRAM_BINS];

void main() {
    ivec2 texelCoord = ivec2(
        gl_GlobalInvocationID.x,
        gl_GlobalInvocationID.y
    );
    
    uint count = 0;

    ivec3 imageSize = imageSize(histograms);

    // count pixels
    for (uint i = 0; i < imageSize.z; i++) {
        count += uint(
            imageLoad(
                histograms,
                ivec3(
                    texelCoord.x,
                    texelCoord.y,
                    i
                )
            ).r
        );
    }

    //debugPrintfEXT("tile %i %i: %i\n", texelCoord.x, texelCoord.y, count);

    // normalized histogram
    for (uint i = 0; i < CLAHE_HISTOGRAM_BINS; i++) {
        uint value = uint(imageLoad(histograms, ivec3(texelCoord.x, texelCoord.y, i)).r);

        float posX = i * (1.0 / imageSize.z);

        // clamp posX to 1.0
        if (i == imageSize.z - 1) posX = 1.0;

        normalizedHist[i] = Point(posX, float(value) / float(count));
    }

    // clip
    float clipLimit = 1.0 / 32.0;
    float clipCount = 0.0;

    for (uint i = 0; i < CLAHE_HISTOGRAM_BINS; i++) {
        if (normalizedHist[i].y > clipLimit) {
            float diff = normalizedHist[i].y - clipLimit;
            clipCount += diff;
            normalizedHist[i].y = clipLimit;
        }
    }

    // if (texelCoord.x == 95 && texelCoord.y == 0) {
    //     uint value = uint(imageLoad(histograms, ivec3(texelCoord.x, texelCoord.y, CLAHE_HISTOGRAM_BINS - 1)).r);
    //     debugPrintfEXT("%i\n", value);
    // }

    float clipAdd = clipCount / CLAHE_HISTOGRAM_BINS;

    for (uint i = 0; i < CLAHE_HISTOGRAM_BINS; i++) {
        normalizedHist[i].y += clipAdd;
    }

    // (normalized) cumulative distribution function
    float currCount = 0.0;

    for (uint i = 0; i < CLAHE_HISTOGRAM_BINS; i++) {
        currCount += normalizedHist[i].y;
        float posX = i * (1.0 / CLAHE_HISTOGRAM_BINS);

        // clamp posX to 1.0
        if (i == CLAHE_HISTOGRAM_BINS - 1) posX = 1.0;

        points[texelCoord.x][texelCoord.y][i] = Point(posX, currCount);
    }

    // if (texelCoord.x == 16 && texelCoord.y == 16) {
    //     for (uint i = 0; i < imageSize.z; i++) {
    //         debugPrintfEXT("%f, %f\n", points[texelCoord.x][texelCoord.y][i].x, points[texelCoord.x][texelCoord.y][i].y);
    //     }
    // }
}