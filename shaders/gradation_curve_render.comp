#version 450
//#extension GL_EXT_debug_printf : enable

#define MAX_POINTS 256
#define CURVE_BINS 512 // also workgroup

layout (local_size_x = CURVE_BINS) in;

struct Point {
    float x;
    float y;
};

layout (binding = 0, rgba8) uniform writeonly image2D outputImage;
layout (binding = 1) buffer GradationCurveObject {
    Point points[MAX_POINTS];
    uint pointsCount;

    float t0;
    float ta;
    float t1;
};

float linearFunction(Point p1, Point p2, float x) {
    float m = (p2.y - p1.y) / (p2.x - p1.x);

    return m * x + p1.y;
}

float getY(float x) {
    for (uint i = 0; i < pointsCount; i++) {
        if (points[i].x == x) return points[i].y;

        if (points[i].x <= x && points[i + 1].x >= x)
            return linearFunction(points[i], points[i + 1], x - points[i].x);
    }

    return 0.0;
}

void main() {
    uint curveBin = gl_GlobalInvocationID.x;
    float curvePosition = curveBin * (1.0 / CURVE_BINS);
    
    ivec2 imageSize = imageSize(outputImage);

    //debugPrintfEXT("%f\n", curvePosition * float(CURVE_BINS) * (float(imageSize.x) / CURVE_BINS));

    uint posX = uint(curvePosition * float(CURVE_BINS) * (float(imageSize.x) / CURVE_BINS));
    uint posY = (imageSize.y - 1) - uint(getY(curvePosition) * (imageSize.y - 1));

    // draw t0
    if (curvePosition <= t0 && t0 < (curveBin + 1) * (1.0 / CURVE_BINS)) {
        for (uint i = 0; i < imageSize.x; i++) {
                imageStore(outputImage, ivec2(posX, i), vec4(1, 0, 0, 1));
        }
    }

    // draw ta
    if (curvePosition <= ta && ta < (curveBin + 1) * (1.0 / CURVE_BINS)) {
        for (uint i = 0; i < imageSize.x; i++) {
                imageStore(outputImage, ivec2(posX, i), vec4(1, 1, 0, 1));
        }
    }

    // draw t1
    if (curvePosition <= t1 && t1 < (curveBin + 1) * (1.0 / CURVE_BINS)) {
        for (uint i = 0; i < imageSize.x; i++) {
                imageStore(outputImage, ivec2(posX, i), vec4(1, 0, 0, 1));
        }
    }


    imageStore(outputImage, ivec2(posX, posY), vec4(1, 1, 1, 1));
}